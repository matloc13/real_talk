{"version":3,"sources":["components/MyEditor.js","components/NewSession.js","components/RegisterUser.js","components/Header.js","components/Nav.js","components/Comment.js","components/ShowEditor.js","components/ShowPost.js","components/UpdatePost.js","components/Index.js","App.js","serviceWorker.js","index.js"],"names":["MyEditor","state","editorState","EditorState","createEmpty","saveContent","contentState","_this","getCurrentContent","console","log","blogPostBody","JSON","stringify","convertToRaw","fetch","props","baseURL","method","body","headers","Content-Type","then","res","json","resJson","addBlogPost","catch","error","Error","onChange","setState","onBoldClick","RichUtils","toggleInlineStyle","command","newState","handleKeyCommand","this","react_default","a","createElement","className","onClick","Draft","color","size","React","Component","NewSession","currentUser","username","password","redirect","handleSubmit","event","preventDefault","getUser","onSubmit","htmlFor","name","id","type","handleChange","value","RegisterUser","addUser","Header","user","_this2","href","react_router_dom","react_router","path","render","components_NewSession","Object","assign","to","components_RegisterUser","InfoNav","CommentEditor","ShowEditor","createWithContent","convertFromRaw","parse","content","addComment","toggleAddComment","readOnly","Comment","ShowPost","UpdatePost","saveUpdatedContent","post","_id","copyBlogPosts","toConsumableArray","posts","findIndex","title","blogPosts","Index","map","key","showPost","components_ShowEditor","deleteBlogPost","process","REACT_APP_BASEURL","App","users","blogPost","getBlogPosts","data","parsedData","desiredUser","copyUsers","unshift","defineProperty","target","response","index","splice","components_Header","Nav","components_Index","components_MyEditor","components_ShowPost","components_UpdatePost","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.280fb602.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Editor,\n        EditorState,\n        RichUtils,\n        convertToRaw,\n        convertFromRaw} from 'draft-js'\n\nimport { Button } from 'reactstrap';\n\n// import './App.css'\n\nclass MyEditor extends React.Component {\n  state = {\n    editorState: EditorState.createEmpty()\n  }\n  saveContent = () => {\n    const contentState = this.state.editorState.getCurrentContent()\n    console.log(\"Content State: \", contentState)\n    const blogPostBody = JSON.stringify(convertToRaw(contentState))\n    console.log(\"Converted to Raw: \", blogPostBody)\n    fetch(this.props.baseURL + '/blogposts', {\n        method: 'POST',\n        body: JSON.stringify({\n          blogPostBody\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then(res => res.json())\n    .then(resJson => {\n      console.log(\"resJson: \", resJson)\n      this.props.addBlogPost(resJson)\n    }).catch (error => console.error({'Error': error}))\n  }\n\n  onChange = (editorState) => {\n    this.setState({\n      editorState\n    })\n  }\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command)\n    if (newState) {\n      this.onChange(newState)\n      return 'handled'\n    }\n    return 'not-handled'\n  }\n  onBoldClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState,'BOLD'))\n  }\n  render () {\n    return (\n      <div className=\"textEditorWrapper\">\n        <button onClick={this.onBoldClick}>Bold</button>\n        <Editor\n          className=\"textEditor\"\n          editorState={this.state.editorState}\n          handleKeyCommand={this.handleKeyCommand}\n          onChange={this.onChange}\n        />\n        <button onClick={this.saveContent} color=\"primary\" size=\"sm\">SAVE</button>\n      </div>\n    )\n  }\n}\n\n\nexport default MyEditor;\n","\nimport React, {Component} from 'react'\n\n\nclass NewSession extends Component {\n\n    state = {\n        currentUser: '',\n        username: '',\n        password: '',\n        redirect: false\n    }\n\n    // setRedirect = () => {\n    //     this.setState({\n    //         redirect: true\n    //     })\n    // }\n\n    // renderRedirect = () => {\n    //     if (this.state.redirect) {\n    //         return <Redirect to='/' />\n    //     }\n    // }\n\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(this.props.baseURL + '/sessions', {\n            method: 'POST',\n            body: JSON.stringify({\n                username: this.props.username,\n                password: this.props.password\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n        .then(resJson => {\n\n            this.setState({\n                currentUser: resJson.currentUser,\n                username: resJson.username,\n                password: resJson.password\n            })\n            this.props.getUser(this.state.currentUser)\n            console.log(resJson.username)\n            console.log(resJson.currentUser)\n            // this.props.history.push('/')\n        })\n        // .catch(error => console.error({'Error': error}))\n    }\n\n\n    render () {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"username\" name=\"username\">Username:</label>\n                    <input name=\"username\" id=\"username\" type=\"text\" onChange={this.props.handleChange} />\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"password\" name=\"password\">Password:</label>\n                    <input name=\"password\" id=\"password\" type=\"password\" onChange={this.props.handleChange} />\n                </div>\n\n\n                <input type=\"submit\" value=\"Login\" />\n            </form>\n\n        )\n    }\n}\n\n\nexport default NewSession\n","\nimport React, {Component} from 'react'\n\nclass RegisterUser extends Component {\n    state = {\n        name: '',\n        username: '',\n        password: '',\n        redirect: false\n    }\n\n    // renderRedirect = () => {\n    //     if (this.state.redirect) {\n    //         return <Redirect to='/' />\n    //     }\n    // }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(this.props.baseURL + '/users', {\n            method: 'POST',\n            body: JSON.stringify({\n                name: this.props.name,\n                username: this.props.username,\n                password: this.props.password\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n        .then(resJson => {\n            // console.log(resJson.name)\n            this.setState({\n                name: '',\n                username: '',\n                password: '',\n            })\n            this.props.addUser(resJson)\n        }).catch(error => console.error({'Error': error}))\n\n    }\n\n    render () {\n        return (\n            <div className=\"container card\">\n                <form className=\"m-2\" onSubmit={this.handleSubmit}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"name\" name=\"name\">Name:</label>\n                        <input name=\"name\" id=\"name\" type=\"text\" onChange={this.props.handleChange} />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"username\" name=\"username\">Username:</label>\n                        <input name=\"username\" id=\"username\" type=\"text\" onChange={this.props.handleChange} />\n                    </div>\n\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\" name=\"password\">Password:</label>\n                        <input name=\"password\" id=\"password\" type=\"password\" onChange={this.props.handleChange}/>\n                    </div>\n\n\n                    <input type=\"submit\" value=\"Create New User\" />\n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default RegisterUser\n","\nimport React, {Component} from 'react'\n\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom'\nimport Login from './NewSession.js'\nimport RegisterUser from './RegisterUser.js'\n\nclass Header extends Component {\n\n  state = {\n    user: {\n      name: '',\n      username: '',\n      password: ''\n    }\n  }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(this.props.baseURL + '/sessions', {\n            method: 'DELETE'\n        }).then(res => res.json())\n        .then(resJson => {\n          console.log(resJson)\n            this.setState({\n                user: {\n                  name: '',\n                  username: '',\n                  password: ''\n                }\n            })\n\n            // this.props.getUser()\n        })\n    }\n\n    render () {\n        return (\n          <header>\n            {console.log(this.props.user)}\n            {\n              // (this.props.user != null && this.props.user.username != '')\n              this.props.user ?\n                <nav className=\"navbar\">\n\n                  <a className=\"btn\" href=\"/real_talk/\"><h1>Real Talk</h1></a>\n                  <h4 className=\"mr-n5\">{this.props.user.username}</h4>\n                  <form onSubmit={this.handleSubmit}>\n                    <input className=\"btn\" type=\"submit\" value=\"Logout\" />\n                  </form>\n                </nav>\n              :\n              <nav className=\"navbar\">\n                <a className=\"btn\" href=\"/real_talk/\"><h1>Real Talk</h1></a>\n                <Router>\n                  <Route path=\"/login\" render={(props) => <Login {...props} baseURL={this.props.baseURL} handleChange={this.props.handleChange}/>}/>\n\n                  <Link to=\"/login\">Login</Link>\n                  <Route path=\"/login\" render={(props) => <Login {...props} baseURL={this.props.baseURL} handleChange={this.props.handleChange} username={this.props.username} password={this.props.password} getUser={this.props.getUser}/>}/>\n\n                  <Route path=\"/register\" render={(props) => <RegisterUser {...props} handleChange={this.props.handleChange} baseURL={this.props.baseURL} addUser={this.props.addUser}/>}/>\n\n                  <Link to=\"/register\">Register</Link>\n\n\n                </Router>\n              </nav>\n\n            }\n              </header>\n\n        )\n    }\n}\n\nexport default Header\n","import React from 'react'\n\n// import {\n//   Collapse,\n//   Navbar,\n//   NavbarToggler,\n//   NavbarBrand,\n//   Nav,\n//   NavItem,\n//   NavLink,\n//   UncontrolledDropdown,\n//   DropdownToggle,\n//   DropdownMenu,\n//   DropdownItem } from 'reactstrap';\n\nimport { Link } from 'react-router-dom'\n\nclass InfoNav extends React.Component {\n  render() {\n    return(\n      <nav className=\"second navbar\">\n\n        <span>{this.props.user}</span>\n        <Link to=\"/index\">Index</Link>\n        <Link to=\"/newPost\">New</Link>\n        {/* <Link to=\"/showPost\">Show Post</Link>\n        <Link to=\"/update\">Update</Link> */}\n\n      </nav>\n    )\n  }\n}\nexport default InfoNav\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  convertFromRaw,\n  convertToRaw\n} from 'draft-js'\n\nclass CommentEditor extends React.Component {\n  state = {\n    editorState: EditorState.createEmpty()\n  }\n  onChange = (editorState) => {\n    this.setState({\n      editorState\n    })\n  }\n  render () {\n    return (\n      <div className=\"showDiv\">\n        <Editor\n          editorState={this.state.editorState}\n          onChange={this.onChange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default CommentEditor;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  convertFromRaw,\n  convertToRaw\n} from 'draft-js'\nimport CommentEditor from './Comment'\n\nclass ShowEditor extends React.Component {\n  state = {\n    editorState: EditorState.createWithContent(convertFromRaw(JSON.parse(this.props.content))),\n    addComment: false\n  }\n  toggleAddComment = () => {\n    this.setState({\n      addComment: !this.state.addComment\n    })\n  }\n  render () {\n    return (\n      <div className=\"showDiv\">\n        <Editor\n          editorState={this.state.editorState}\n          readOnly={true}\n        />\n        <button onClick={this.toggleAddComment}>Comment</button>\n        {this.state.addComment ? <CommentEditor /> : null}\n      </div>\n    )\n  }\n}\n\nexport default ShowEditor;\n","import React, { Component } from 'react'\nimport {\n  Editor,\n  EditorState,\n  convertFromRaw,\n  convertToRaw\n} from 'draft-js'\nimport ShowEditor from './ShowEditor.js'\n\nclass ShowPost extends Component {\n\nstate = {\n  editorState: EditorState.createWithContent(convertFromRaw(JSON.parse(this.props.content)))\n}\n// componentDidMount() {\n//   this.findPost(this.props.post)\n// }\n// findPost = (post) => {\n//   const copyBlogPosts = [...this.props.posts]\n//   const findIndex = this.props.posts.findIndex(blogpost => blogpost._id === post._id)\n//\n//   copyBlogPosts[findIndex].blogPostBody\n//   this.setState({\n//     thispost:\n//   })\n// }\n\n  render() {\n    return (\n      <div className=\"showPost\">\n        {/* <h2>{this.props.post.title}</h2> */}\n        {/* <p>{this.props.post.blogPostBody}</p> */}\n        {/* {console.log(this.props.post.blogPostBody)} */}\n        <div className=\"hidden\">{this.props.content}</div>\n        <Editor\n          editorState={this.state.editorState}\n        />\n\n\n      </div>\n    )\n  }\n}\n\nexport default ShowPost\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Editor,\n        EditorState,\n        RichUtils,\n        convertToRaw,\n        convertFromRaw} from 'draft-js'\n\nclass UpdatePost extends React.Component {\n  state = {\n    editorState: EditorState.createWithContent(convertFromRaw(JSON.parse(this.props.content)))\n\n  }\n\n  onChange = (editorState) => {\n    this.setState({\n      editorState\n    })\n  }\n\n  saveUpdatedContent = () => {\n    const contentState = this.state.editorState.getCurrentContent()\n    console.log(\"Content State: \", contentState)\n    const blogPostBody = JSON.stringify(convertToRaw(contentState))\n    console.log(\"Converted to Raw: \", blogPostBody)\n    fetch(this.props.baseURL + '/blogposts/' + this.props.post._id, {\n        method: 'PUT',\n        body: JSON.stringify({\n          blogPostBody\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then (res => res.json())\n    .then(resJson => {\n      const copyBlogPosts = [...this.props.posts]\n      const findIndex = this.props.posts.findIndex(post => post._id === resJson._id)\n      copyBlogPosts[findIndex].title = resJson.title\n      copyBlogPosts[findIndex].blogPostBody = resJson.blogPostBody\n        this.setState({\n            blogPosts: copyBlogPosts\n        })\n    }).catch (error => console.error({'Error': error}))\n  }\n\n    render () {\n        return (\n            <div className=\"UpdatePost\">\n              <div className=\"hidden\">{this.props.content}</div>\n              <Editor\n                editorState={this.state.editorState}\n                onChange={this.onChange}\n              />\n              <button onClick={this.saveUpdatedContent}>SAVE</button>\n\n            </div>\n        )\n    }\n}\n\nexport default UpdatePost\n","import React, { Component } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nimport ShowEditor from './ShowEditor.js'\n\nclass Index extends Component {\n  render(){\n    return (\n      <div className=\"container\">\n\n        {\n          this.props.blogPosts.map(post => {\n            return (\n              <div className=\"indexItem\" key={post._id}>\n\n                <h2 onClick={()=> this.props.showPost(post)}>{post.title}</h2>\n\n\n                <Link\n                  to=\"/showPost\"\n                  onClick={() => this.props.showPost(post)}\n                >All</Link>\n\n                <ShowEditor\n                  content={post.blogPostBody}\n                />\n\n                <span onClick={() => this.props.deleteBlogPost(post._id)}>X</span>\n\n                <Link\n                  to=\"/update\"\n                  onClick={()=>this.props.showPost(post)}\n                  >Edit \n                </Link>\n              </div>\n            )\n          })\n\n        }\n      </div>\n    )\n  }\n}\nexport default Index\n","import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport './App.css';\n\nimport MyEditor from './components/MyEditor.js'\n\nimport Header from './components/Header.js'\n\nimport InfoNav from './components/Nav.js'\n\nimport ShowPost from './components/ShowPost.js'\n\nimport ShowEditor from './components/ShowEditor.js'\n\nimport UpdatePost from './components/UpdatePost.js'\n\nimport Index from './components/Index.js'\n\nimport { getCiphers } from 'tls';\nlet baseURL = process.env.REACT_APP_BASEURL\n\nif (process.env.NODE_ENV === 'development') {\n  baseURL = 'http://localhost:3003'\n} else {\n  baseURL = 'https://realtalkblog.herokuapp.com'\n}\n\nconsole.log('Current Base URL: ', baseURL)\n\nclass App extends Component{\n  state = {\n    users: [],\n    user: {\n      name: '',\n      username: '',\n      password: ''\n    },\n    blogPosts: [],\n    blogPost: {},\n    content: ''\n  }\n\n  componentDidMount () {\n    this.getBlogPosts()\n  }\n\n  getBlogPosts = () => {\n    fetch(baseURL + '/blogposts')\n    .then(data => {\n      console.log(data)\n      return data.json()},\n      error => console.error(error))\n      .then(parsedData => this.setState({\n        blogPosts: parsedData\n      }),\n      error => console.error(error))\n  }\n\n  getUser = (desiredUser) => {\n    fetch(baseURL + '/users/' + desiredUser)\n    .then(data => {\n      console.log(data)\n      return data.json()},\n      error => console.error(error))\n      .then(parsedData => this.setState({user: parsedData}),\n      error => console.error(error))\n  }\n\n  addUser = (user) => {\n   const copyUsers = [...this.state.users]\n   copyUsers.unshift(user)\n   this.setState({\n     users: copyUsers\n   })\n }\n\n  addBlogPost = (blogPost) => {\n    const copyBlogPosts = [...this.state.blogPosts]\n    copyBlogPosts.unshift(blogPost)\n    this.setState({\n      blogPosts: copyBlogPosts\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n        [event.target.id]: event.target.value\n    })\n  }\n\n  deleteBlogPost = (id) => {\n    fetch(baseURL + '/blogposts/' + id, {\n      method: 'DELETE'})\n      .then(response => {\n        const index = this.state.blogPosts.findIndex(blogPost => blogPost._id === id)\n        const copyBlogPosts = [...this.state.blogPosts]\n        copyBlogPosts.splice(index, 1)\n        this.setState({blogPosts: copyBlogPosts})\n    })\n  }\n\n  //// May need to simply remove this.\n    showPost = (post) => {\n      const index = this.state.blogPosts.findIndex(blogPosts => blogPosts._id === post._id)\n      const content = this.state.blogPosts[index].blogPostBody\n      this.setState({\n        blogPost: post,\n        content: content\n      })\n    }\n\n\n  render() {\n    return (\n<Router>\n  <div className=\"App\">\n    {/* <h1>Real Talk</h1> */}\n    {/* <a className=\"btn\" href=\"/\"><h1>Real Talk</h1></a> */}\n    <Header\n      baseURL={baseURL}\n      handleChange = {this.handleChange}\n      addUser = {this.addUser}\n      user = {this.state.user}\n      // currentUser={this.state.users}\n    />\n    <InfoNav user={this.state.users.username}/>\n    <Switch>\n\n\n      {\n        this.state.blogPosts ?\n          <Route path=\"/index\" render={(props) => <Index {...props} blogPosts={this.state.blogPosts} showPost={this.showPost} deleteBlogPost={this.deleteBlogPost}/>}/>: \"no content\"\n      }\n      <Route path=\"/newPost\" render={(props) => <MyEditor {...props} baseURL={baseURL} addBlogPost={this.addBlogPost}/>}/>\n\n      <Route path=\"/showPost\" render={(props) => <ShowPost {...props} post={this.state.blogPost} posts={this.state.blogPosts} content={this.state.content}/>}/>\n\n      <Route path=\"/update\"\n        render={(props) => <UpdatePost {...props} post={this.state.blogPost}\n        baseURL={baseURL}\n        posts={this.state.blogPosts}\n        content={this.state.content}\n        addBlogPost={this.addBlogPost}\n        />}/>\n\n    </Switch>\n    {/* <MyEditor\n      baseURL={baseURL}\n      addBlogPost={this.addBlogPost}\n    /> */}\n\n    {/* <ShowPost\n      posts={this.state.blogPosts}\n      post={this.state.blogPost}\n\n    /> */}\n\n    {/* <UpdatePost\n      post={this.state.blogPost}\n      baseURL={baseURL}\n      posts={this.state.blogPosts}\n      handleChange={this.handleChange}\n    /> */}\n\n    {/* {\n      this.state.blogPosts ?\n        <Index\n      blogPosts={this.state.blogPosts}\n      deleteBlogPost={this.deleteBlogPost}\n      showPost={this.showPost}\n        />:\" no content\"\n    } */}\n\n  </div>\n</Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}