{"version":3,"sources":["logo.svg","components/NewPost.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NewPost","state","title","blogPostBody","handleChange","event","_this","setState","Object","defineProperty","target","id","value","handleSubmit","preventDefault","fetch","props","baseURL","method","body","JSON","stringify","header","Content-Type","then","res","json","resJson","addBlogPost","catch","error","console","Error","react_default","a","createElement","onSubmit","this","htmlFor","type","name","placeholder","onChange","React","Component","process","REACT_APP_BASEURL","log","App","blogPosts","blogPost","getBlogPosts","data","parsedData","copyBlogPosts","toConsumableArray","unshift","className","components_NewPost","map","post","key","_id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yMCwDzBC,6MApDXC,MAAQ,CACJC,MAAO,GACPC,aAAc,MAGlBC,aAAe,SAACC,GACZC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAMK,OAAOC,GAAKN,EAAMK,OAAOE,WAIxCC,aAAe,SAACR,GACZA,EAAMS,iBACNC,MAAMT,EAAKU,MAAMC,QAAU,aAAc,CACrCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBnB,MAAOI,EAAKL,MAAMC,MAClBC,aAAcG,EAAKL,MAAME,eAE7BmB,OAAQ,CACJC,eAAgB,sBAErBC,KAAM,SAAAC,GAAG,OAAIA,EAAIC,SACnBF,KAAK,SAAAG,GACFrB,EAAKU,MAAMY,YAAYD,GACvBrB,EAAKC,SAAS,CACVL,MAAO,GACPC,aAAc,OAEnB0B,MAAO,SAAAC,GAAK,OAAIC,QAAQD,MAAM,CAACE,MAASF,+EAK3C,OACIG,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUC,KAAKxB,cAEjBoB,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,SAAf,SACAL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOC,KAAK,QAAQC,YAAY,eAAeC,SAAUL,KAAKjC,eAG1E6B,EAAAC,EAAAC,cAAA,SAAOG,QAAQ,gBAAf,QACAL,EAAAC,EAAAC,cAAA,SAAOI,KAAK,WAAWC,KAAK,eAAeE,SAAUL,KAAKjC,eAE1D6B,EAAAC,EAAAC,cAAA,SAAOI,KAAK,SAAS3B,MAAM,6BA9CzB+B,IAAMC,WCGxB3B,SAAU4B,wDAAYC,mBAOxB7B,EAAU,sCAGZc,QAAQgB,IAAI,qBAAsB9B,OAwDnB+B,6MApDb/C,MAAQ,CACNgD,UAAW,GACXC,SAAU,MAOZC,aAAe,WACbpC,MAAME,EAAU,cACfO,KAAK,SAAA4B,GACJ,OAAOA,EAAK1B,QACZ,SAAAI,GAAK,OAAIC,QAAQD,MAAMA,KACtBN,KAAK,SAAA6B,GAAU,OAAI/C,EAAKC,SAAS,CAAC0C,UAAWI,KAC9C,SAAAvB,GAAK,OAAIC,QAAQD,MAAMA,QAG3BF,YAAc,SAACsB,GACb,IAAMI,EAAa9C,OAAA+C,EAAA,EAAA/C,CAAOF,EAAKL,MAAMgD,WACrCK,EAAcE,QAAQN,GACtB5C,EAAKC,SAAS,CACZ0C,UAAWK,EACXpD,MAAO,yFAjBTmC,KAAKc,gDAuBL,OACElB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACuB,EAAD,CACEzC,QAASA,EACTW,YAAaS,KAAKT,cAGlBS,KAAKpC,MAAMgD,UAAUU,IAAI,SAAAC,GACvB,OACE3B,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,aACbxB,EAAAC,EAAAC,cAAA,MAAI0B,IAAKD,EAAKE,KAAMF,EAAK1D,OACzB+B,EAAAC,EAAAC,cAAA,MAAI0B,IAAKD,EAAKE,KAAd,QACA7B,EAAAC,EAAAC,cAAA,SAAIyB,EAAKzD,yBA3CPyC,aCPEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC","file":"static/js/main.5a04c12b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nimport React from 'react'\n\nclass NewPost extends React.Component {\n    state = {\n        title: '',\n        blogPostBody: ''\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.id]: event.target.value\n        })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(this.props.baseURL + '/blogposts', {\n            method: 'POST',\n            body: JSON.stringify({\n                title: this.state.title,\n                blogPostBody: this.state.blogPostBody\n            }),\n            header: {\n                'Content-Type': 'application/json'\n            }\n        }).then (res => res.json())\n        .then(resJson => {\n            this.props.addBlogPost(resJson)\n            this.setState({\n                title: '',\n                blogPostBody: ''\n            })\n        }).catch (error => console.error({'Error': error}))\n    }\n\n\n    render () {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n\n                    <label htmlFor=\"title\">Title</label>\n                    <input type=\"text\" name=\"title\" placeholder=\"Sample Title\" onChange={this.handleChange} />\n\n\n                    <label htmlFor=\"blogPostBody\">Body</label>\n                    <input type=\"textarea\" name=\"blogPostBody\" onChange={this.handleChange} />\n\n                    <input type=\"submit\" value=\"Submit New Post\"/>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default NewPost","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport NewPost from './components/NewPost.js'\nimport { getCiphers } from 'tls';\nlet baseURL = process.env.REACT_APP_BASEURL\n\n\n\nif (process.env.NODE_ENV === 'development') {\n  baseURL = 'http://localhost:3003'\n} else {\n  baseURL = 'https://realtalkblog.herokuapp.com/'\n}\n\nconsole.log('Current Base URL: ', baseURL)\n\n\nclass App extends Component{\n  state = {\n    blogPosts: [],\n    blogPost: {}\n  }\n\n  componentDidMount () {\n    this.getBlogPosts()\n  }\n\n  getBlogPosts = () => {\n    fetch(baseURL + '/blogposts')\n    .then(data => {\n      return data.json()},\n      error => console.error(error))\n      .then(parsedData => this.setState({blogPosts: parsedData}),\n      error => console.error(error))\n  }\n\n  addBlogPost = (blogPost) => {\n    const copyBlogPosts = [...this.state.blogPosts]\n    copyBlogPosts.unshift(blogPost)\n    this.setState({\n      blogPosts: copyBlogPosts,\n      title: ''\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Real Talk</h1>\n        <NewPost\n          baseURL={baseURL}\n          addBlogPost={this.addBlogPost}\n        />\n        {\n          this.state.blogPosts.map(post => {\n            return (\n              <div className=\"container\">\n                <h2 key={post._id}>{post.title}</h2>\n                <h5 key={post._id}>Edit</h5>\n                <p>{post.blogPostBody}</p>\n              </div>\n            )\n          })\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}