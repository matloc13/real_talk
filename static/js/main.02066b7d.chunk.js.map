{"version":3,"sources":["components/MyEditor.js","components/Header.js","components/Nav.js","components/ShowEditor.js","components/ShowPost.js","components/UpdatePost.js","components/RegisterUser.js","components/Index.js","App.js","serviceWorker.js","index.js"],"names":["MyEditor","state","editorState","EditorState","createEmpty","saveContent","contentState","_this","getCurrentContent","console","log","blogPostBody","JSON","stringify","convertToRaw","fetch","props","baseURL","method","body","headers","Content-Type","then","res","json","resJson","addBlogPost","catch","error","Error","onChange","setState","onBoldClick","RichUtils","toggleInlineStyle","command","newState","handleKeyCommand","this","react_default","a","createElement","className","onClick","Draft","color","size","React","Component","Header","handleSubmit","event","preventDefault","currentUser","href","onSubmit","type","value","react_router_dom","to","InfoNav","user","ShowEditor","createWithContent","convertFromRaw","parse","content","readOnly","ShowPost","UpdatePost","saveUpdatedContent","post","_id","copyBlogPosts","Object","toConsumableArray","posts","findIndex","title","blogPosts","RegisterUser","name","username","password","addUser","htmlFor","id","handleChange","Index","map","key","showPost","deleteBlogPost","components_ShowEditor","process","REACT_APP_BASEURL","App","users","blogPost","getBlogPosts","data","parsedData","copyUsers","unshift","defineProperty","target","response","index","splice","_this2","components_Header","Nav","react_router","path","render","components_RegisterUser","assign","components_Index","components_MyEditor","components_ShowPost","components_UpdatePost","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sOAqEeA,6MAxDbC,MAAQ,CACNC,YAAaC,cAAYC,iBAE3BC,YAAc,WACZ,IAAMC,EAAeC,EAAKN,MAAMC,YAAYM,oBAC5CC,QAAQC,IAAI,kBAAmBJ,GAC/B,IAAMK,EAAeC,KAAKC,UAAUC,uBAAaR,IACjDG,QAAQC,IAAI,qBAAsBC,GAClCI,MAAMR,EAAKS,MAAMC,QAAU,aAAc,CACrCC,OAAQ,OACRC,KAAMP,KAAKC,UAAU,CACnBF,iBAEFS,QAAS,CACLC,eAAgB,sBAErBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAClBF,KAAK,SAAAG,GACJhB,QAAQC,IAAI,YAAae,GACzBlB,EAAKS,MAAMU,YAAYD,KACtBE,MAAO,SAAAC,GAAK,OAAInB,QAAQmB,MAAM,CAACC,MAASD,SAG7CE,SAAW,SAAC5B,GACVK,EAAKwB,SAAS,CACZ7B,mBAWJ8B,YAAc,WACZzB,EAAKuB,SAASG,YAAUC,kBAAkB3B,EAAKN,MAAMC,YAAY,0FATlDiC,EAASjC,GACxB,IAAMkC,EAAWH,YAAUI,iBAAiBnC,EAAaiC,GACzD,OAAIC,GACFE,KAAKR,SAASM,GACP,WAEF,+CAMP,OACEG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKN,aAAtB,QACAO,EAAAC,EAAAC,cAACG,EAAA,OAAD,CACEF,UAAU,aACVxC,YAAaoC,KAAKrC,MAAMC,YACxBmC,iBAAkBC,KAAKD,iBACvBP,SAAUQ,KAAKR,WAEjBS,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKjC,YAAawC,MAAM,UAAUC,KAAK,MAAxD,gBAlDeC,IAAMC,WCwBdC,6MA9BXC,aAAe,SAACC,GACZA,EAAMC,iBACNrC,MAAMR,EAAKS,MAAMC,QAAS,aAAc,CACpCC,OAAQ,WACTI,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAClBF,KAAK,SAAAG,+EAMN,OACQa,KAAKtB,MAAMqC,YACXd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAMY,KAAK,KAAIf,EAAAC,EAAAC,cAAA,wBAC1BF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACdH,EAAAC,EAAAC,cAAA,QAAMc,SAAUjB,KAAKtB,MAAMkC,cACvBX,EAAAC,EAAAC,cAAA,SAAOC,UAAU,MAAMc,KAAK,SAASC,MAAM,aAInDlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,MAAMY,KAAK,KAAIf,EAAAC,EAAAC,cAAA,wBAC1BF,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAG,UAAT,SACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAG,aAAT,oBA1BCX,aC4BNY,mLAbX,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEbH,EAAAC,EAAAC,cAAA,YAAOH,KAAKtB,MAAM6C,MAClBtB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAG,UAAT,SACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAG,YAAT,eAPcZ,IAAMC,WCWbc,6MAjBb7D,MAAQ,CACNC,YAAaC,cAAY4D,kBAAkBC,yBAAepD,KAAKqD,MAAM1D,EAAKS,MAAMkD,oFAKhF,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACG,EAAA,OAAD,CACE1C,YAAaoC,KAAKrC,MAAMC,YACxBiE,UAAU,YAXKpB,IAAMC,WCkChBoB,6MAjCfnE,MAAQ,CACNC,YAAaC,cAAY4D,kBAAkBC,yBAAepD,KAAKqD,MAAM1D,EAAKS,MAAMkD,oFAgB9E,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAIbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUJ,KAAKtB,MAAMkD,SACpC3B,EAAAC,EAAAC,cAACG,EAAA,OAAD,CACE1C,YAAaoC,KAAKrC,MAAMC,sBA1BX8C,aCmDRqB,6MAnDbpE,MAAQ,CACNC,YAAaC,cAAY4D,kBAAkBC,yBAAepD,KAAKqD,MAAM1D,EAAKS,MAAMkD,cAIlFpC,SAAW,SAAC5B,GACVK,EAAKwB,SAAS,CACZ7B,mBAIJoE,mBAAqB,WACnB,IAAMhE,EAAeC,EAAKN,MAAMC,YAAYM,oBAC5CC,QAAQC,IAAI,kBAAmBJ,GAC/B,IAAMK,EAAeC,KAAKC,UAAUC,uBAAaR,IACjDG,QAAQC,IAAI,qBAAsBC,GAClCI,MAAMR,EAAKS,MAAMC,QAAU,cAAgBV,EAAKS,MAAMuD,KAAKC,IAAK,CAC5DtD,OAAQ,MACRC,KAAMP,KAAKC,UAAU,CACnBF,iBAEFS,QAAS,CACLC,eAAgB,sBAErBC,KAAM,SAAAC,GAAG,OAAIA,EAAIC,SACnBF,KAAK,SAAAG,GACJ,IAAMgD,EAAaC,OAAAC,EAAA,EAAAD,CAAOnE,EAAKS,MAAM4D,OAC/BC,EAAYtE,EAAKS,MAAM4D,MAAMC,UAAU,SAAAN,GAAI,OAAIA,EAAKC,MAAQ/C,EAAQ+C,MAC1EC,EAAcI,GAAWC,MAAQrD,EAAQqD,MACzCL,EAAcI,GAAWlE,aAAec,EAAQd,aAC9CJ,EAAKwB,SAAS,CACVgD,UAAWN,MAEhB9C,MAAO,SAAAC,GAAK,OAAInB,QAAQmB,MAAM,CAACC,MAASD,+EAIvC,OACIW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUJ,KAAKtB,MAAMkD,SACpC3B,EAAAC,EAAAC,cAACG,EAAA,OAAD,CACE1C,YAAaoC,KAAKrC,MAAMC,YACxB4B,SAAUQ,KAAKR,WAEjBS,EAAAC,EAAAC,cAAA,UAAQE,QAASL,KAAKgC,oBAAtB,gBA7CWvB,IAAMC,WCsDhBgC,6MAzDX/E,MAAQ,CACJgF,KAAM,GACNC,SAAU,GACVC,SAAU,MAGdjC,aAAe,SAACC,GACZA,EAAMC,iBACNrC,MAAMR,EAAKS,MAAMC,QAAU,cAAe,CACtCC,OAAQ,OACRC,KAAMP,KAAKC,UAAU,CACjBoE,KAAM1E,EAAKN,MAAMgF,KACjBC,SAAU3E,EAAKN,MAAMiF,SACrBC,SAAU5E,EAAKN,MAAMkF,WAEzB/D,QAAS,CACLC,eAAgB,sBAErBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAClBF,KAAK,SAAAG,GACFlB,EAAKwB,SAAS,CACVkD,KAAM,GACNC,SAAU,GACVC,SAAU,KAEd5E,EAAKS,MAAMoE,QAAQ3D,KACpBE,MAAM,SAAAC,GAAK,OAAInB,QAAQmB,MAAM,CAACC,MAASD,+EAI1C,OACIW,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,QAAMc,SAAUjB,KAAKY,cACnBX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO4C,QAAQ,OAAOJ,KAAK,QAA3B,SACA1C,EAAAC,EAAAC,cAAA,SAAOwC,KAAK,OAAOK,GAAG,OAAO9B,KAAK,OAAO1B,SAAUQ,KAAKiD,gBAG1DhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO4C,QAAQ,WAAWJ,KAAK,YAA/B,aACA1C,EAAAC,EAAAC,cAAA,SAAOwC,KAAK,WAAWK,GAAG,OAAO9B,KAAK,OAAO1B,SAAUQ,KAAKiD,gBAG9DhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAO4C,QAAQ,WAAWJ,KAAK,YAA/B,aACA1C,EAAAC,EAAAC,cAAA,SAAOwC,KAAK,WAAWK,GAAG,WAAW9B,KAAK,WAAW1B,SAAUQ,KAAKiD,gBAIlEhD,EAAAC,EAAAC,cAAA,SAAOe,KAAK,SAASC,MAAM,6BAlDpBT,aCsCZwC,mLAnCL,IAAAjF,EAAA+B,KACN,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAGXJ,KAAKtB,MAAM+D,UAAUU,IAAI,SAAAlB,GACvB,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYgD,IAAKnB,EAAKC,KAEnCjC,EAAAC,EAAAC,cAAA,MAAIE,QAAS,kBAAKpC,EAAKS,MAAM2E,SAASpB,KAAQA,EAAKO,OAEnDvC,EAAAC,EAAAC,cAAA,QAAME,QAAS,kBAAMpC,EAAKS,MAAM4E,eAAerB,EAAKC,OAApD,KAEAjC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,GAAG,UACHhB,QAAS,kBAAIpC,EAAKS,MAAM2E,SAASpB,KAFnC,SAKAhC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CACEC,GAAG,YACHhB,QAAS,kBAAMpC,EAAKS,MAAM2E,SAASpB,KAFrC,OAKAhC,EAAAC,EAAAC,cAACoD,EAAD,CACE3B,QAASK,EAAK5D,0BAzBZqC,aCiBhB/B,UAAU6E,wDAAYC,mBAKxB9E,EAAU,qCAGZR,QAAQC,IAAI,qBAAsBO,OAuInB+E,6MApIb/F,MAAQ,CACNgG,MAAO,GACPlB,UAAW,GACXmB,SAAU,GACVhC,QAAS,MAOXiC,aAAe,WACbpF,MAAME,EAAU,cACfK,KAAK,SAAA8E,GAEJ,OADA3F,QAAQC,IAAI0F,GACLA,EAAK5E,QACZ,SAAAI,GAAK,OAAInB,QAAQmB,MAAMA,KACtBN,KAAK,SAAA+E,GAAU,OAAI9F,EAAKwB,SAAS,CAChCgD,UAAWsB,KAEb,SAAAzE,GAAK,OAAInB,QAAQmB,MAAMA,QAG3BwD,QAAU,SAACvB,GACV,IAAMyC,EAAS5B,OAAAC,EAAA,EAAAD,CAAOnE,EAAKN,MAAMgG,OACjCK,EAAUC,QAAQ1C,GAClBtD,EAAKwB,SAAS,CACZkE,MAAOK,OAIV5E,YAAc,SAACwE,GACb,IAAMzB,EAAaC,OAAAC,EAAA,EAAAD,CAAOnE,EAAKN,MAAM8E,WACrCN,EAAc8B,QAAQL,GACtB3F,EAAKwB,SAAS,CACZgD,UAAWN,OAIfc,aAAe,SAACpC,GACd5C,EAAKwB,SAAL2C,OAAA8B,EAAA,EAAA9B,CAAA,GACKvB,EAAMsD,OAAOnB,GAAKnC,EAAMsD,OAAOhD,WAItCmC,eAAiB,SAACN,GAChBvE,MAAME,EAAU,cAAgBqE,EAAI,CAClCpE,OAAQ,WACPI,KAAK,SAAAoF,GACJ,IAAMC,EAAQpG,EAAKN,MAAM8E,UAAUF,UAAU,SAAAqB,GAAQ,OAAIA,EAAS1B,MAAQc,IACpEb,EAAaC,OAAAC,EAAA,EAAAD,CAAOnE,EAAKN,MAAM8E,WACrCN,EAAcmC,OAAOD,EAAO,GAC5BpG,EAAKwB,SAAS,CAACgD,UAAWN,SAK9BkB,SAAW,SAACpB,GACV,IAAMoC,EAAQpG,EAAKN,MAAM8E,UAAUF,UAAU,SAAAE,GAAS,OAAIA,EAAUP,MAAQD,EAAKC,MAC3EN,EAAU3D,EAAKN,MAAM8E,UAAU4B,GAAOhG,aAC5CJ,EAAKwB,SAAS,CACZmE,SAAU3B,EACVL,QAASA,wFAtDb5B,KAAK6D,gDA2DE,IAAAU,EAAAvE,KACP,OACJC,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAGbH,EAAAC,EAAAC,cAACqE,EAAD,MAGAvE,EAAAC,EAAAC,cAACsE,EAAD,CAASlD,KAAMvB,KAAKrC,MAAMgG,MAAMf,WAChC3C,EAAAC,EAAAC,cAACuE,EAAA,EAAD,KACEzE,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CACEC,KAAK,YACLC,OAAQ,SAAClG,GAAD,OAAWuB,EAAAC,EAAAC,cAAC0E,EAADzC,OAAA0C,OAAA,GAAkBpG,EAAlB,CAAyBuE,aAAcsB,EAAKtB,aAActE,QAASA,EAASmE,QAASyB,EAAKzB,cAG7G9C,KAAKrC,MAAM8E,UACTxC,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAOC,KAAK,SAASC,OAAQ,SAAClG,GAAD,OAAWuB,EAAAC,EAAAC,cAAC4E,EAAD3C,OAAA0C,OAAA,GAAWpG,EAAX,CAAkB+D,UAAW8B,EAAK5G,MAAM8E,UAAWY,SAAUkB,EAAKlB,SAAUC,eAAgBiB,EAAKjB,qBAAsB,aAEnKrD,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAOC,KAAK,WAAWC,OAAQ,SAAClG,GAAD,OAAWuB,EAAAC,EAAAC,cAAC6E,EAAD5C,OAAA0C,OAAA,GAAcpG,EAAd,CAAqBC,QAASA,EAASS,YAAamF,EAAKnF,kBAEnGa,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAOC,KAAK,YAAYC,OAAQ,SAAClG,GAAD,OAAWuB,EAAAC,EAAAC,cAAC8E,EAAD7C,OAAA0C,OAAA,GAAcpG,EAAd,CAAqBuD,KAAMsC,EAAK5G,MAAMiG,SAAUtB,MAAOiC,EAAK5G,MAAM8E,UAAWb,QAAS2C,EAAK5G,MAAMiE,cAE5I3B,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAOC,KAAK,UACVC,OAAQ,SAAClG,GAAD,OAAWuB,EAAAC,EAAAC,cAAC+E,EAAD9C,OAAA0C,OAAA,GAAgBpG,EAAhB,CAAuBuD,KAAMsC,EAAK5G,MAAMiG,SAC3DjF,QAASA,EACT2D,MAAOiC,EAAK5G,MAAM8E,UAClBb,QAAS2C,EAAK5G,MAAMiE,QACpBxC,YAAamF,EAAKnF,4BAhGRsB,aCrBEyE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASZ,OAAQ3E,EAAAC,EAAAC,cAAEsF,EAAF,MAAYC,SAASC,eAAe,SDyH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9G,KAAK,SAAA+G,GACjCA,EAAaC","file":"static/js/main.02066b7d.chunk.js","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Editor,\n        EditorState,\n        RichUtils,\n        convertToRaw,\n        convertFromRaw} from 'draft-js'\n\nimport { Button } from 'reactstrap';\n\n// import './App.css'\n\nclass MyEditor extends React.Component {\n  state = {\n    editorState: EditorState.createEmpty()\n  }\n  saveContent = () => {\n    const contentState = this.state.editorState.getCurrentContent()\n    console.log(\"Content State: \", contentState)\n    const blogPostBody = JSON.stringify(convertToRaw(contentState))\n    console.log(\"Converted to Raw: \", blogPostBody)\n    fetch(this.props.baseURL + '/blogposts', {\n        method: 'POST',\n        body: JSON.stringify({\n          blogPostBody\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then(res => res.json())\n    .then(resJson => {\n      console.log(\"resJson: \", resJson)\n      this.props.addBlogPost(resJson)\n    }).catch (error => console.error({'Error': error}))\n  }\n\n  onChange = (editorState) => {\n    this.setState({\n      editorState\n    })\n  }\n  handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command)\n    if (newState) {\n      this.onChange(newState)\n      return 'handled'\n    }\n    return 'not-handled'\n  }\n  onBoldClick = () => {\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState,'BOLD'))\n  }\n  render () {\n    return (\n      <div className=\"textEditorWrapper\">\n        <button onClick={this.onBoldClick}>Bold</button>\n        <Editor\n          className=\"textEditor\"\n          editorState={this.state.editorState}\n          handleKeyCommand={this.handleKeyCommand}\n          onChange={this.onChange}\n        />\n        <button onClick={this.saveContent} color=\"primary\" size=\"sm\">SAVE</button>\n      </div>\n    )\n  }\n}\n\n\nexport default MyEditor;\n","\nimport React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\n\nclass Header extends Component {\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(this.props.baseURL+ '/blogposts', {\n            method: 'DELETE'\n        }).then(res => res.json())\n        .then(resJson => {\n\n        })\n    }\n\n    render () {\n        return (\n                this.props.currentUser ?\n                <nav className=\"navbar\">\n                  <a className=\"btn\" href=\"/\"><h1>Real Talk</h1></a>\n                    <h4 className=\"mr-n5\"></h4>\n                    <form onSubmit={this.props.handleSubmit}>\n                        <input className=\"btn\" type=\"submit\" value=\"Logout\" />\n                    </form>\n                </nav>\n                :\n                <nav className=\"navbar\">\n                  <a className=\"btn\" href=\"/\"><h1>Real Talk</h1></a>\n                    <Link to=\"/login\">Login</Link>\n                    <Link to=\"/register\">Register</Link>\n                </nav>\n        )\n    }\n}\n\nexport default Header\n","import React from 'react'\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem } from 'reactstrap';\n\nimport { Link } from 'react-router-dom'\n\nclass InfoNav extends React.Component {\n  render() {\n    return(\n      <nav className=\"second navbar\">\n\n        <span>{this.props.user}</span>\n        <Link to=\"/index\">Index</Link>\n        <Link to=\"/newPost\">New</Link>\n        {/* <Link to=\"/showPost\">Show Post</Link>\n        <Link to=\"/update\">Update</Link> */}\n\n      </nav>\n    )\n  }\n}\nexport default InfoNav\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  Editor,\n  EditorState,\n  RichUtils,\n  convertFromRaw,\n  convertToRaw\n} from 'draft-js'\n\nclass ShowEditor extends React.Component {\n  state = {\n    editorState: EditorState.createWithContent(convertFromRaw(JSON.parse(this.props.content))\n      //I believe a \"decorator\" needs to be declared here to fix formattting\n    )\n  }\n  render () {\n    return (\n      <div className=\"showDiv\">\n        <Editor\n          editorState={this.state.editorState}\n          readOnly={true}\n        />\n      </div>\n    )\n  }\n}\n\nexport default ShowEditor;\n","import React, { Component } from 'react'\nimport {\n  Editor,\n  EditorState,\n  convertFromRaw,\n  convertToRaw\n} from 'draft-js'\nimport ShowEditor from './ShowEditor.js'\n\nclass ShowPost extends Component {\n\nstate = {\n  editorState: EditorState.createWithContent(convertFromRaw(JSON.parse(this.props.content)))\n}\n// componentDidMount() {\n//   this.findPost(this.props.post)\n// }\n// findPost = (post) => {\n//   const copyBlogPosts = [...this.props.posts]\n//   const findIndex = this.props.posts.findIndex(blogpost => blogpost._id === post._id)\n//\n//   copyBlogPosts[findIndex].blogPostBody\n//   this.setState({\n//     thispost:\n//   })\n// }\n\n  render() {\n    return (\n      <div className=\"showPost\">\n        {/* <h2>{this.props.post.title}</h2> */}\n        {/* <p>{this.props.post.blogPostBody}</p> */}\n        {/* {console.log(this.props.post.blogPostBody)} */}\n        <div className=\"hidden\">{this.props.content}</div>\n        <Editor\n          editorState={this.state.editorState}\n        />\n\n\n      </div>\n    )\n  }\n}\n\nexport default ShowPost\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Editor,\n        EditorState,\n        RichUtils,\n        convertToRaw,\n        convertFromRaw} from 'draft-js'\n\nclass UpdatePost extends React.Component {\n  state = {\n    editorState: EditorState.createWithContent(convertFromRaw(JSON.parse(this.props.content)))\n\n  }\n\n  onChange = (editorState) => {\n    this.setState({\n      editorState\n    })\n  }\n\n  saveUpdatedContent = () => {\n    const contentState = this.state.editorState.getCurrentContent()\n    console.log(\"Content State: \", contentState)\n    const blogPostBody = JSON.stringify(convertToRaw(contentState))\n    console.log(\"Converted to Raw: \", blogPostBody)\n    fetch(this.props.baseURL + '/blogposts/' + this.props.post._id, {\n        method: 'PUT',\n        body: JSON.stringify({\n          blogPostBody\n        }),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }).then (res => res.json())\n    .then(resJson => {\n      const copyBlogPosts = [...this.props.posts]\n      const findIndex = this.props.posts.findIndex(post => post._id === resJson._id)\n      copyBlogPosts[findIndex].title = resJson.title\n      copyBlogPosts[findIndex].blogPostBody = resJson.blogPostBody\n        this.setState({\n            blogPosts: copyBlogPosts\n        })\n    }).catch (error => console.error({'Error': error}))\n  }\n\n    render () {\n        return (\n            <div className=\"UpdatePost\">\n              <div className=\"hidden\">{this.props.content}</div>\n              <Editor\n                editorState={this.state.editorState}\n                onChange={this.onChange}\n              />\n              <button onClick={this.saveUpdatedContent}>SAVE</button>\n\n            </div>\n        )\n    }\n}\n\nexport default UpdatePost\n","\nimport React, {Component} from 'react'\n// import { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\n\nclass RegisterUser extends Component {\n    state = {\n        name: '',\n        username: '',\n        password: ''\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(this.props.baseURL + '/blogposts/', {\n            method: 'POST',\n            body: JSON.stringify({\n                name: this.state.name,\n                username: this.state.username,\n                password: this.state.password\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(res => res.json())\n        .then(resJson => {\n            this.setState({\n                name: '',\n                username: '',\n                password: '',\n            })\n            this.props.addUser(resJson)\n        }).catch(error => console.error({'Error': error}))\n    }\n\n    render () {\n        return (\n            <div className=\"container card\">\n              <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\" name=\"name\">Name:</label>\n                  <input name=\"name\" id=\"name\" type=\"text\" onChange={this.handleChange} />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\" name=\"username\">Username:</label>\n                  <input name=\"username\" id=\"text\" type=\"text\" onChange={this.handleChange} />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\" name=\"password\">Password:</label>\n                  <input name=\"password\" id=\"password\" type=\"password\" onChange={this.handleChange} />\n                    </div>\n\n\n                    <input type=\"submit\" value=\"Create New User\" />\n                </form>\n            </div>\n        )\n    }\n}\n\n\nexport default RegisterUser\n","import React, { Component } from 'react'\n\nimport { Link } from 'react-router-dom'\n\nimport ShowEditor from './ShowEditor.js'\n\nclass Index extends Component {\n  render(){\n    return (\n      <div className=\"container\">\n\n        {\n          this.props.blogPosts.map(post => {\n            return (\n              <div className=\"indexItem\" key={post._id}>\n\n                <h2 onClick={()=> this.props.showPost(post)}>{post.title}</h2>\n\n                <span onClick={() => this.props.deleteBlogPost(post._id)}>X</span>\n\n                <Link\n                  to=\"/update\"\n                  onClick={()=>this.props.showPost(post)}\n                >Edit </Link>\n\n                <Link\n                  to=\"/showPost\"\n                  onClick={() => this.props.showPost(post)}\n                >All</Link>\n\n                <ShowEditor\n                  content={post.blogPostBody}\n                />\n              </div>\n            )\n          })\n\n        }\n      </div>\n    )\n  }\n}\nexport default Index\n","import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\nimport './App.css';\n\nimport MyEditor from './components/MyEditor.js'\n\nimport Header from './components/Header.js'\n\nimport InfoNav from './components/Nav.js'\n\nimport ShowPost from './components/ShowPost.js'\n\nimport ShowEditor from './components/ShowEditor.js'\n\nimport UpdatePost from './components/UpdatePost.js'\n\nimport RegisterUser from './components/RegisterUser.js'\n\nimport Index from './components/Index.js'\n\nimport { getCiphers } from 'tls';\nlet baseURL = process.env.REACT_APP_BASEURL\n\nif (process.env.NODE_ENV === 'development') {\n  baseURL = 'http://localhost:3003'\n} else {\n  baseURL = 'https://realtalkblog.herokuapp.com'\n}\n\nconsole.log('Current Base URL: ', baseURL)\n\nclass App extends Component{\n  state = {\n    users: [],\n    blogPosts: [],\n    blogPost: {},\n    content: ''\n  }\n\n  componentDidMount () {\n    this.getBlogPosts()\n  }\n\n  getBlogPosts = () => {\n    fetch(baseURL + '/blogposts')\n    .then(data => {\n      console.log(data)\n      return data.json()},\n      error => console.error(error))\n      .then(parsedData => this.setState({\n        blogPosts: parsedData\n      }),\n      error => console.error(error))\n  }\n\n  addUser = (user) => {\n   const copyUsers = [...this.state.users]\n   copyUsers.unshift(user)\n   this.setState({\n     users: copyUsers\n   })\n }\n\n  addBlogPost = (blogPost) => {\n    const copyBlogPosts = [...this.state.blogPosts]\n    copyBlogPosts.unshift(blogPost)\n    this.setState({\n      blogPosts: copyBlogPosts\n    })\n  }\n\n  handleChange = (event) => {\n    this.setState({\n        [event.target.id]: event.target.value\n    })\n  }\n\n  deleteBlogPost = (id) => {\n    fetch(baseURL + '/blogposts/' + id, {\n      method: 'DELETE'})\n      .then(response => {\n        const index = this.state.blogPosts.findIndex(blogPost => blogPost._id === id)\n        const copyBlogPosts = [...this.state.blogPosts]\n        copyBlogPosts.splice(index, 1)\n        this.setState({blogPosts: copyBlogPosts})\n    })\n  }\n\n  //// May need to simply remove this.\n    showPost = (post) => {\n      const index = this.state.blogPosts.findIndex(blogPosts => blogPosts._id === post._id)\n      const content = this.state.blogPosts[index].blogPostBody\n      this.setState({\n        blogPost: post,\n        content: content\n      })\n    }\n\n\n  render() {\n    return (\n<Router>\n  <div className=\"App\">\n    {/* <h1>Real Talk</h1> */}\n    {/* <a className=\"btn\" href=\"/\"><h1>Real Talk</h1></a> */}\n    <Header\n      // currentUser={this.state.users}\n    />\n    <InfoNav user={this.state.users.username}/>\n    <Switch>\n      <Route\n        path=\"/register\"\n        render={(props) => <RegisterUser {...props} handleChange={this.handleChange} baseURL={baseURL} addUser={this.addUser}/>}/>\n\n      {\n        this.state.blogPosts ?\n          <Route path=\"/index\" render={(props) => <Index {...props} blogPosts={this.state.blogPosts} showPost={this.showPost} deleteBlogPost={this.deleteBlogPost}/>}/>: \"no content\"\n      }\n      <Route path=\"/newPost\" render={(props) => <MyEditor {...props} baseURL={baseURL} addBlogPost={this.addBlogPost}/>}/>\n\n      <Route path=\"/showPost\" render={(props) => <ShowPost {...props} post={this.state.blogPost} posts={this.state.blogPosts} content={this.state.content}/>}/>\n\n      <Route path=\"/update\"\n        render={(props) => <UpdatePost {...props} post={this.state.blogPost}\n        baseURL={baseURL}\n        posts={this.state.blogPosts}\n        content={this.state.content}\n        addBlogPost={this.addBlogPost}\n        />}/>\n\n    </Switch>\n    {/* <MyEditor\n      baseURL={baseURL}\n      addBlogPost={this.addBlogPost}\n    /> */}\n\n    {/* <ShowPost\n      posts={this.state.blogPosts}\n      post={this.state.blogPost}\n\n    /> */}\n\n    {/* <UpdatePost\n      post={this.state.blogPost}\n      baseURL={baseURL}\n      posts={this.state.blogPosts}\n      handleChange={this.handleChange}\n    /> */}\n\n    {/* {\n      this.state.blogPosts ?\n        <Index\n      blogPosts={this.state.blogPosts}\n      deleteBlogPost={this.deleteBlogPost}\n      showPost={this.showPost}\n        />:\" no content\"\n    } */}\n\n  </div>\n</Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\n\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( < App / > , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}